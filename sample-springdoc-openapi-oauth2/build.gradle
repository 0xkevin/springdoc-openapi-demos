plugins {
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'org.springframework.boot' version "2.2.2.RELEASE" apply false
	id 'java'
}

ext {
	springBootVersion = '2.2.2.RELEASE'
	springDocVersion = '1.4.4'
}

allprojects {
	group = 'org.springdoc'
	version = springDocVersion
	sourceCompatibility = '1.8'
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'

	springBoot {
		buildInfo()
	}

	bootJar {
		archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
	}

	configurations {
		testCompileOnly.extendsFrom compileOnly
		developmentOnly
		runtimeClasspath {
			extendsFrom developmentOnly
		}
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
		testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testImplementation 'io.rest-assured:rest-assured:3.3.0'
		runtimeOnly 'com.h2database:h2:1.4.200'
	}

	dependencyManagement {
		imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
		dependencies {
			dependency "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
			dependency "org.springdoc:springdoc-openapi-security:${springDocVersion}"
		}
	}

	test {
		useJUnitPlatform()
	}

	sourceCompatibility = '1.8'

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				versionMapping {
					usage('java-api') {
						fromResolutionOf('runtimeClasspath')
					}
					usage('java-runtime') {
						fromResolutionResult()
					}
				}
			}
		}
		repositories {
			maven {
				if (project.version.endsWith('-SNAPSHOT')) {
					url "https://oss.sonatype.org/content/repositories/snapshots"
				} else {
					url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
				}
				credentials {
					username System.getenv("OSSRH_USER")
					password System.getenv("OSSRH_PASS")
				}
			}
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}
}
