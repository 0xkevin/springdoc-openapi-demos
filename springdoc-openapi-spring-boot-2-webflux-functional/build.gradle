plugins {
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'org.springframework.boot' version "2.3.0.RELEASE"
	id 'java'
}

ext {
	springDocVersion = '1.4.2'
}

group = 'org.springdoc'
version = springDocVersion
sourceCompatibility = '1.8'

springBoot {
	buildInfo()
}

repositories {
	mavenLocal()
	mavenCentral()
}


apply plugin: 'java-library'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'

bootJar {
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

configurations {
	testCompileOnly.extendsFrom compileOnly
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation "org.springdoc:springdoc-openapi-webflux-ui:${springDocVersion}"
	implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation 'io.projectreactor:reactor-test'
}


test {
	useJUnitPlatform()
}

publishing {
	publications {
		maven(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			if (project.version.endsWith('-SNAPSHOT')) {
				url "https://oss.sonatype.org/content/repositories/snapshots"
			} else {
				url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			}
			credentials {
				username System.getenv("OSSRH_USER")
				password System.getenv("OSSRH_PASS")
			}
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

