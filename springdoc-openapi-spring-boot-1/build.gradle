plugins {
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'org.springframework.boot' version "1.5.22.RELEASE"
	id 'java'
}

ext {
	springDocVersion = '1.4.2'
	jacksonVersion = '2.10.1'
}

group = 'org.springdoc'
version = springDocVersion
sourceCompatibility = '1.8'

repositories {
	mavenLocal()
	mavenCentral()
}


apply plugin: 'java-library'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'

springBoot {
	buildInfo()
}


jar {
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

configurations {
	testCompileOnly.extendsFrom compileOnly
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-web"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compile "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
	compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
	compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
	compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
	compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
}


test {
	useJUnitPlatform()
}

publishing {
	publications {
		maven(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			if (project.version.endsWith('-SNAPSHOT')) {
				url "https://oss.sonatype.org/content/repositories/snapshots"
			} else {
				url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			}
			credentials {
				username System.getenv("OSSRH_USER")
				password System.getenv("OSSRH_PASS")
			}
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

